plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'

}

group = 'org.iptime.yoon'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled=false
}
ext {
    set('springBootAdminVersion', "3.2.1")
}
dependencies {


    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    implementation 'com.auth0:java-jwt:4.4.0'

    implementation 'com.squareup.okio:okio:3.4.0'
    implementation 'io.minio:minio:8.5.7'

    implementation 'net.coobird:thumbnailator:0.4.17'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'de.codecentric:spring-boot-admin-starter-client'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'


    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    runtimeOnly 'com.mysql:mysql-connector-j'


    testImplementation 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

}
dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}



jacocoTestReport {
    dependsOn test // makes sure tests are run before generating reports
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    // Exclude classes that end with 'Config'
                    '**/*Config.class',
                    '**/*Properties.class',
                    '**/*Initializer.class',
                    '**/*Constants.class'

            ])
        }))
    }
    reports {
        xml
        csv
        html
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
